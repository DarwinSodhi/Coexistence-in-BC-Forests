rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
setwd("~/Documents/Ph.D/LI-COR Data (pacific spirit park)")
library(reshape2)
library(data.table)
library(tibble)
library(dplyr)
library(vegan)
library(tidyverse)
library(dbplyr)
library(tidyr)
library(reshape2)
LiCordatafinal <- read_csv("LiCordatafinalpsp.csv")
LiCordata_adult <- LiCordatafinal[LiCordatafinal$Species != 'AMBIENT',]
LiCordata_adult1 <- LiCordatafinal[LiCordatafinal$Species == 'AMBIENT',]
LiCordata_adult <- LiCordata_adult[,c(1:2,426:441,448,450)]
LiCordata_adult[, c(3:17)] <- sapply(LiCordata_adult[, c(3:17)], as.numeric)
LiCordata_adult1 <- LiCordata_adult1[,c(1:2,426:441,448,450)]
LiCordata_adult1[, c(3:17)] <- sapply(LiCordata_adult1[, c(3:17)], as.numeric)
LiCordata_adult <- LiCordata_adult[order(LiCordata_adult$Time),]
LiCordata_adult <- LiCordata_adult[-54,]
#makes rowsname species names
rownames(LiCordata_adult) <- make.names(LiCordata_adult$Species, unique = TRUE)
#repeats each ambient reading three times in a new dataset
LiCordata_adult1 <- LiCordata_adult1 %>% slice(rep(1:n(), each = 3))
path <- unique(names(LiCordata_adult[,(3:17)]))
k2 <- (matrix(NA, nrow= nrow(LiCordata_adult[,(3:17)]), ncol = ncol(LiCordata_adult[,(3:17)])))
colnames(k2) <- colnames(LiCordata_adult[,(3:17)])
row.names(k2) <- rownames(LiCordata_adult[,(3:17)])
colnames(k2) <- colnames(LiCordata_adult)
k2 <- (matrix(NA, nrow= nrow(LiCordata_adult[,(3:17)]), ncol = ncol(LiCordata_adult[,(3:17)])))
colnames(k2) <- colnames(LiCordata_adult[,(3:17)])
row.names(k2) <- rownames(LiCordata_adult)
for (n in 1:length(path)){
k2[,n]<- as.matrix(LiCordata_adult[,n] - LiCordata_adult1[,n] + abs(min(LiCordata_adult1[,n])))
}
str(LiCordata_adult1)
for (n in 1:length(path)){
k2[,n]<- as.matrix(LiCordata_adult[,(3:17)][,n] - LiCordata_adult1[,(3:17)][,n] + abs(min(LiCordata_adult1[,(3:17)][,n])))
}
View(k2)
for (n in 1:length(path)){
k2[,n]<- as.matrix(LiCordata_adult[,(3:17)][,n] - LiCordata_adult1[,(3:17)][,n])  ###+ abs(min(LiCordata_adult1[,(3:17)][,n])))
}
View(k2)
community_matrix <- as.matrix(k2) #creates matrix
example_NMDS=metaMDS(community_matrix, k=3, autotransform = FALSE) #runs NMDS
path <- unique(names(LiCordata_adult[,(3:17)]))
k2 <- (matrix(NA, nrow= nrow(LiCordata_adult[,(3:17)]), ncol = ncol(LiCordata_adult[,(3:17)])))
colnames(k2) <- colnames(LiCordata_adult[,(3:17)])
row.names(k2) <- rownames(LiCordata_adult)
for (n in 1:length(path)){
k2[,n]<- as.matrix(LiCordata_adult[,(3:17)][,n] - LiCordata_adult1[,(3:17)][,n] + abs(min(LiCordata_adult1[,(3:17)][,n])))
}
community_matrix <- as.matrix(k2) #creates matrix
example_NMDS=metaMDS(community_matrix, k=3, autotransform = FALSE) #runs NMDS
pdf(file= paste("NMDS_RambspcPSPST",".pdf", sep = ))
write.csv(k2, "NMDS_RambspcPSPST.csv")
stressplot(example_NMDS)
plot(example_NMDS)
orditorp(example_NMDS,display="sites",cex= 0.5,air= 0.3)#labels points as best as we can
dev.off()
NMDS_RambspcPSPST <- read.csv("~/Documents/Ph.D/LI-COR Data (pacific spirit park)/NMDS_RambspcPSPST.csv", header=FALSE)
View(NMDS_RambspcPSPST)
###################################################
#Models attempting to code dataset to run linear models
###################################################
setwd("~/Documents/Ph.D/LI-COR Data (Manning Park)/NMDS")
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
library(tidyverse)
library(dbplyr)
library(tidyr)
library(reshape2)
library(data.table)
library(tibble)
library(dplyr)
nmds <-
list.files(pattern = "*.csv") %>%
map_df(~read.csv(.))
View(nmds)
###################################################
#Models attempting to code dataset to run linear models
###################################################
setwd("~/Documents/Ph.D/LI-COR Data (pacific spirit park)")
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
library(tidyverse)
library(dbplyr)
library(tidyr)
library(reshape2)
library(data.table)
library(tibble)
library(dplyr)
NMDS_RambspcPSPST <- read.csv("~/Documents/Ph.D/LI-COR Data (pacific spirit park)/NMDS_RambspcPSPST.csv", header=FALSE)
View(NMDS_RambspcPSPST)
header.true <- function(NMDS_RambspcPSPST) {
names(NMDS_RambspcPSPST) <- as.character(unlist(NMDS_RambspcPSPST[1,]))
NMDS_RambspcPSPST[-1,]
}
View(header.true)
colnames(NMDS_RambspcPSPST) <- NMDS_RambspcPSPST[1,]
NMDS_RambspcPSPST <- NMDS_RambspcPSPST[-1,]
Species <- colnames(NMDS_RambspcPSPST[,1])
colnames(NMDS_RambspcPSPST[,1])
NMDS_RambspcPSPST$Species <- colnames(NMDS_RambspcPSPST[,1])
`colnames<-`(NMDS_RambspcPSPST[,1], Species)
NMDS_RambspcPSPST$specieslatbi<-sub("^([[:alpha:]]*).*", "\\1", NMDS_RambspcPSPST$``)
colnames(NMDS_RambspcPSPST)[1]
colnames(NMDS_RambspcPSPST)[1] <- "Species"
NMDS_RambspcPSPST$specieslatbi<-sub("^([[:alpha:]]*).*", "\\1", NMDS_RambspcPSPST$Species)
setwd("~/Documents/Ph.D/LI-COR Data (Manning Park)/R readings")
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
library(tidyverse)
library(dbplyr)
library(tidyr)
library(reshape2)
library(data.table)
library(tibble)
library(dplyr)
nmds <-
list.files(pattern = "*.csv") %>%
map_df(~read.csv(.))
View(nmds)
nmds$specieslatbi<-sub("^([[:alpha:]]*).*", "\\1", nmds$X)
###################################################
#Models attempting to code dataset to run linear models
###################################################
setwd("~/Documents/Ph.D/LI-COR Data (pacific spirit park)")
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
library(tidyverse)
library(dbplyr)
library(tidyr)
library(reshape2)
library(data.table)
library(tibble)
library(dplyr)
NMDS_RambspcPSPST <- read.csv("~/Documents/Ph.D/LI-COR Data (pacific spirit park)/NMDS_RambspcPSPST.csv", header=FALSE)
colnames(NMDS_RambspcPSPST) <- NMDS_RambspcPSPST[1,]
NMDS_RambspcPSPST <- NMDS_RambspcPSPST[-1,]
colnames(NMDS_RambspcPSPST)[1] <- "Species"
NMDS_RambspcPSPST$specieslatbi<-sub("^([[:alpha:]]*).*", "\\1", NMDS_RambspcPSPST$Species)
nmds1 <- melt(NMDS_RambspcPSPST, id.vars = c("Species", "specieslatbi"))
View(nmds1)
path <- unique(nmds1$variable)
for (i in (unique(nmds1$variable))){
filename<- paste("Licormodels",i,".csv", sep = "")
li <- subset(nmds1, variable == i)
li <- na.omit(li)
lm(value ~ specieslatbi, data= li)
s <- summary(lm(value ~ specieslatbi, data= li))
s <- as.data.frame(s$coefficients)
write.csv(s, filename)
}
unique(nmds1$specieslatbi)
filename<- paste("Licormodels",1,".csv", sep = "")
path[1]
filename<- paste("Licormodels",path[1],".csv", sep = "")
li <- subset(nmds1, variable == path[1])
View(li)
li <- na.omit(li)
View(li)
lm(value ~ site + specieslatbi, data= li)
path <- unique(nmds1$variable)
filename<- paste("Licormodels",path[1],".csv", sep = "")
li <- subset(nmds1, variable == path[1])
View(li)
li <- na.omit(li)
lm(value ~ specieslatbi, data= li)
View(li)
s <- summary(lm(value ~ specieslatbi, data= li))
View(s)
s <- summary(lm(value ~ [li$specieslatbi == 'ACEMAC',], data= li))
[li$specieslatbi == 'ACEMAC',]
[li$specieslatbi == 'ACEMAC']
li$specieslatbi
unique(li$specieslatbi)
View(li)
library(ggplot2)
ggplot(li, aes(value, specieslatbi)) + geom_point(col =specieslatbi )
ggplot(li, aes(value, specieslatbi))
ggplot(li, aes(specieslatbi, value,)) + geom_point(col = specieslatbi )
ggplot(li, aes(specieslatbi, value,))
ggplot(li, aes(specieslatbi, value,)) + geom_boxplot()
ggplot(li, aes(value,specieslatbi)) + geom_boxplot()
ggplot(li, aes(value,specieslatbi)) + geom_bar(stat= "specieslatbi")
ggplot(li, aes(value,specieslatbi)) + geom_bar(stat= "variable")
ggplot(li, aes(value,specieslatbi)) + geom_bar(stat= "Species")
ggplot(li, aes(value,specieslatbi)) + geom_bar(stat= Species)
ggplot(li, aes(value,specieslatbi)) + geom_bar()
####script to create light data for Ph.D.
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
setwd("~/Documents/Ph.D/LI-COR Data (pacific spirit park)/SPT")
library(tidyverse)
library(dbplyr)
library(data.table)
library(readr)
library(reshape2)
#### uploads all the data in the LI-COR Data folder
tbl <-
list.files(pattern = "*.xls") %>%
map_df(~read.delim(.))
### Removing unwanted rows from dataset
tbl<- tbl[tbl$Model.Name!="Serial Number",]
tbl<- tbl[tbl$Model.Name!="Memo",]
### Rename column names
names(tbl)[names(tbl) == "Model.Name"] <- "Variable"
names(tbl)[names(tbl) == "LI.180"] <- "Value"
write_csv(tbl, "licordataPSPspt.csv")
### add species and site data in excel (figure out a better way to do this!)
licordata <- read_csv("~/Documents/Ph.D/LI-COR Data (pacific spirit park)/SPT/licordataPSPspt.csv")
### Adding time data!
# creates a table with just time data
tbl2 <- filter(tbl,tbl$Variable == "Time" )
#renames Value column as time
names(tbl2)[names(tbl2)== "Value"] <- "time"
#creates character vector  with repeating times
ASDAD <-rep(tbl2$time, 443)
#Makes character vector into a dataframe
df<- as.data.frame(ASDAD)
# rearranges time in ascending order
df<- arrange(df, ASDAD)
write.csv(df, "df.csv")
df <- read_csv("~/Documents/Ph.D/LI-COR Data (pacific spirit park)/SPT/df.csv")
df <- df[,-1]
#merges previous lightcor data set with a new time data
lightdata<- cbind(licordata, df)
#changes name of column to time
names(lightdata)[names(lightdata)== "ASDAD"] <- "time"
#makes the dataset wide instead of long
lightdatawide<- dcast(lightdata, Species+Site+time~Variable, value.var = "Value", na.rm=TRUE)
#breaks time varible into date and time
breakbywhitespacetime <- strsplit(as.character(lightdatawide$time), "_", fixed=TRUE)
#creates a new column with time of measurement
lightdatawide$Time <- unlist(lapply(breakbywhitespacetime, function(x) x[2]))
#further breaks time column into day, month and year
breakbywhitespacetime2 <- strsplit(as.character(lightdatawide$time), "/", fixed=TRUE)
lightdatawide$year <- unlist(lapply(breakbywhitespacetime2, function(x) x[1]))
lightdatawide$month <- unlist(lapply(breakbywhitespacetime2, function(x) x[2]))
lightdatawide$day <-unlist(lapply(breakbywhitespacetime2, function(x) x[3]))
#removes everything after a _ to retain just the day of measurement
lightdatawide$day <- gsub("_.*","",lightdatawide$day)
#creates a character vector with weather
weather <- rep("sunny", 449)
#merges previous lightcor data set with weather column
lightdatawide<- cbind(lightdatawide, weather)
#splits species column into species latin binomial ("^([[:alpha:]]*).*",
lightdatawide$specieslatbi<-sub("^([[:alpha:]]*).*", "\\1", lightdatawide$Species)
#removes time column
lightdatawide<- lightdatawide[,-3]
View(lightdatawide)
#removes everything after a _ to retain just the day of measurement
lightdatawide$day <- gsub("_.*","",lightdatawide$day)
#creates a character vector with weather
weather <- rep("sunny", 56)
#merges previous lightcor data set with weather column
lightdatawide<- cbind(lightdatawide, weather)
#splits species column into species latin binomial ("^([[:alpha:]]*).*",
lightdatawide$specieslatbi<-sub("^([[:alpha:]]*).*", "\\1", lightdatawide$Species)
#removes time column
lightdatawide<- lightdatawide[,-3]
View(lightdatawide)
View(lightdatawide)
write_csv(lightdatawide, "LiCordatafinalpspspt.csv")
####script to create light data for Ph.D.
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
setwd("~/Documents/GitHub/Coexistence-in-BC-Forests/Analyses/")
library(vegan)
library(tidyverse)
library(dbplyr)
library(tidyr)
library(reshape2)
library(data.table)
library(tibble)
library(dplyr)
LiCordatafinal <- read_csv("input/LiCordatafinalpspspt.csv")
LiCordata_adult <- LiCordatafinal[LiCordatafinal$Species != 'AMBIENT',]
LiCordata_adult1 <- LiCordatafinal[LiCordatafinal$Species == 'AMBIENT',]
LiCordata_adult <- LiCordata_adult[,c(1:2,426:441,448,450)]
LiCordatafinal <- read_csv("input/LiCordatafinalpspspt.csv")
LiCordata_adult <- LiCordatafinal[LiCordatafinal$Species != 'AMBIENT',]
LiCordata_adult1 <- LiCordatafinal[LiCordatafinal$Species == 'AMBIENT',]
View(LiCordata_adult)
LiCordatafinal <- read_csv("input/LiCordatafinalpspsft.csv")
LiCordata_adult3 <- LiCordatafinal[LiCordatafinal$Species != 'AMBIENT',]
View(LiCordatafinal)
names(LiCordata_adult3)
LiCordatafinal <- read_csv("input/LiCordatafinalpspspt.csv")
LiCordata_adult <- LiCordatafinal[LiCordatafinal$Species != 'AMBIENT',]
LiCordata_adult1 <- LiCordatafinal[LiCordatafinal$Species == 'AMBIENT',]
names(LiCordata_adult)
####script to create light data for Ph.D.
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
setwd("~/Documents/Ph.D/LI-COR Data (pacific spirit park)/SPT")
library(tidyverse)
library(dbplyr)
library(data.table)
library(readr)
library(reshape2)
#### uploads all the data in the LI-COR Data folder
tbl <-
list.files(pattern = "*.xls") %>%
map_df(~read.delim(.))
### Removing unwanted rows from dataset
tbl<- tbl[tbl$Model.Name!="Serial Number",]
tbl<- tbl[tbl$Model.Name!="Memo",]
### Rename column names
names(tbl)[names(tbl) == "Model.Name"] <- "Variable"
names(tbl)[names(tbl) == "LI.180"] <- "Value"
### add species and site data in excel (figure out a better way to do this!)
licordata <- read_csv("~/Documents/Ph.D/LI-COR Data (pacific spirit park)/SPT/licordataPSPspt.csv")
### Adding time data!
# creates a table with just time data
tbl2 <- filter(tbl,tbl$Variable == "Time" )
#renames Value column as time
names(tbl2)[names(tbl2)== "Value"] <- "time"
#creates character vector  with repeating times
ASDAD <-rep(tbl2$time, 443)
#Makes character vector into a dataframe
df<- as.data.frame(ASDAD)
# rearranges time in ascending order
df<- arrange(df, ASDAD)
write.csv(df, "df.csv")
df <- read_csv("~/Documents/Ph.D/LI-COR Data (pacific spirit park)/SPT/df.csv")
df <- df[,-1]
#merges previous lightcor data set with a new time data
lightdata<- cbind(licordata, df)
#changes name of column to time
names(lightdata)[names(lightdata)== "ASDAD"] <- "time"
#makes the dataset wide instead of long
lightdatawide<- dcast(lightdata, Species+Site+time~Variable, value.var = "Value", na.rm=TRUE)
#breaks time varible into date and time
breakbywhitespacetime <- strsplit(as.character(lightdatawide$time), "_", fixed=TRUE)
#creates a new column with time of measurement
lightdatawide$Time <- unlist(lapply(breakbywhitespacetime, function(x) x[2]))
#further breaks time column into day, month and year
breakbywhitespacetime2 <- strsplit(as.character(lightdatawide$time), "/", fixed=TRUE)
lightdatawide$year <- unlist(lapply(breakbywhitespacetime2, function(x) x[1]))
lightdatawide$month <- unlist(lapply(breakbywhitespacetime2, function(x) x[2]))
lightdatawide$day <-unlist(lapply(breakbywhitespacetime2, function(x) x[3]))
#removes everything after a _ to retain just the day of measurement
lightdatawide$day <- gsub("_.*","",lightdatawide$day)
#creates a character vector with weather
weather <- rep("sunny", 56)
#merges previous lightcor data set with weather column
lightdatawide<- cbind(lightdatawide, weather)
#splits species column into species latin binomial ("^([[:alpha:]]*).*",
lightdatawide$specieslatbi<-sub("^([[:alpha:]]*).*", "\\1", lightdatawide$Species)
View(lightdatawide)
#removes time column
lightdatawide<- lightdatawide[,-3]
#read csv file for cleaned data
write_csv(lightdatawide, "LiCordatafinalpspspt.csv")
####script to create light data for Ph.D.
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
setwd("~/Documents/GitHub/Coexistence-in-BC-Forests/Analyses/")
library(vegan)
library(tidyverse)
library(dbplyr)
library(tidyr)
library(reshape2)
library(data.table)
library(tibble)
library(dplyr)
LiCordatafinal <- read_csv("input/LiCordatafinalpspspt.csv")
LiCordata_adult <- LiCordatafinal[LiCordatafinal$Species != 'AMBIENT',]
LiCordata_adult1 <- LiCordatafinal[LiCordatafinal$Species == 'AMBIENT',]
View(LiCordata_adult)
LiCordata_adult <- LiCordata_adult[,c(1:2,426:441,448,450)]
LiCordata_adult[, c(3:17)] <- sapply(LiCordata_adult[, c(3:17)], as.numeric)
LiCordata_adult1 <- LiCordata_adult1[,c(1:2,426:441,448,450)]
LiCordata_adult1[, c(3:17)] <- sapply(LiCordata_adult1[, c(3:17)], as.numeric)
LiCordata_adult <- LiCordata_adult[order(LiCordata_adult$Time),]
#makes rowsname species names
rownames(LiCordata_adult) <- make.names(LiCordata_adult$Species, unique = TRUE)
#repeats each ambient reading three times in a new dataset
LiCordata_adult1 <- LiCordata_adult1 %>% slice(rep(1:n(), each = 3))
path <- unique(names(LiCordata_adult[,(3:17)]))
k2 <- (matrix(NA, nrow= nrow(LiCordata_adult[,(3:17)]), ncol = ncol(LiCordata_adult[,(3:17)])))
colnames(k2) <- colnames(LiCordata_adult[,(3:17)])
row.names(k2) <- rownames(LiCordata_adult)
for (n in 1:length(path)){
k2[,n]<- as.matrix(LiCordata_adult[,(3:17)][,n] - LiCordata_adult1[,(3:17)][,n] + abs(min(LiCordata_adult1[,(3:17)][,n])))
}
community_matrix <- as.matrix(k2) #creates matrix
example_NMDS=metaMDS(community_matrix, k=3, autotransform = FALSE) #runs NMDS
filename <- paste("output/NMDS_RambspcPSPSPT",".pdf", sep = )
pdf(file= filename)
write.csv(k2, filename)
stressplot(example_NMDS)
plot(example_NMDS)
orditorp(example_NMDS,display="sites",cex= 0.5,air= 0.3)#labels points as best as we can
dev.off()
View(k2)
View(k2)
write.csv(k2, filename)
path <- unique(names(LiCordata_adult[,(3:17)]))
k2 <- (matrix(NA, nrow= nrow(LiCordata_adult[,(3:17)]), ncol = ncol(LiCordata_adult[,(3:17)])))
colnames(k2) <- colnames(LiCordata_adult[,(3:17)])
row.names(k2) <- rownames(LiCordata_adult)
for (n in 1:length(path)){
k2[,n]<- as.matrix(LiCordata_adult[,(3:17)][,n] - LiCordata_adult1[,(3:17)][,n] + abs(min(LiCordata_adult1[,(3:17)][,n])))
}
community_matrix <- as.matrix(k2) #creates matrix
example_NMDS=metaMDS(community_matrix, k=3, autotransform = FALSE) #runs NMDS
filename <- paste("output/NMDS_RambspcPSPSPT",".pdf", sep = )
pdf(file= filename)
write.csv(k2, filename)
stressplot(example_NMDS)
plot(example_NMDS)
orditorp(example_NMDS,display="sites",cex= 0.5,air= 0.3)#labels points as best as we can
dev.off()
write.csv(k2, "output/NMDS_RambspcPSPSPT.csv")
###################################################
#Models attempting to code dataset to run linear models
###################################################
setwd("~/Documents/GitHub/Coexistence-in-BC-Forests/Analyses/")
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
library(tidyverse)
library(dbplyr)
library(tidyr)
library(reshape2)
library(data.table)
library(tibble)
library(dplyr)
NMDS_RambspcPSPSPT <- read.csv("input/NMDS_RambspcPSPSPT.csv", header=FALSE)
NMDS_RambspcPSPSPT <- read.csv("input/NMDS_RambspcPSPSPT.csv", header=FALSE)
NMDS_RambspcPSPSPT <- read.csv("input/NMDS_RambspcPSPSPT.csv", header=FALSE)
colnames(NMDS_RambspcPSPSPT) <- NMDS_RambspcPSPSPT[1,]
NMDS_RambspcPSPSPT <- NMDS_RambspcPSPSPT[-1,]
colnames(NMDS_RambspcPSPSPT)[1] <- "Species"
NMDS_RambspcPSPSPT$specieslatbi<-sub("^([[:alpha:]]*).*", "\\1", NMDS_RambspcPSPSPT$Species)
nmds1 <- melt(NMDS_RambspcPSPSPT, id.vars = c("Species", "specieslatbi"))
path <- unique(nmds1$variable)
for (i in (unique(nmds1$variable))){
filename<- paste("output/LicormodelsPSPSPT",i,".csv", sep = "")
li <- subset(nmds1, variable == i)
lm(value ~ specieslatbi, data= li)
s <- summary(lm(value ~ specieslatbi, data= li))
s <- as.data.frame(s$coefficients)
write.csv(s, filename)
}
#Licormodels for all pacific spirit park sites
setwd("~/Documents/GitHub/Coexistence-in-BC-Forests/Analyses/")
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
library(tidyverse)
library(dbplyr)
library(tidyr)
library(reshape2)
library(data.table)
library(tibble)
library(dplyr)
#Import datasets
NMDS_RambspcPSPSFT <- read.csv("input/NMDS_RambspcPSPSFT.csv", header=TRUE)
NMDS_RambspcPSPST <- read.csv("input/NMDS_RambspcPSPST.csv", header=TRUE)
NMDS_RambspcPSPST<- read.csv("input/NMDS_RambspcPSPSPT.csv", header=TRUE)
#Import datasets
NMDS_RambspcPSPSFT <- read.csv("input/NMDS_RambspcPSPSFT.csv", header=TRUE)
NMDS_RambspcPSPST <- read.csv("input/NMDS_RambspcPSPST.csv", header=TRUE)
NMDS_RambspcPSPSPT<- read.csv("input/NMDS_RambspcPSPSPT.csv", header=TRUE)
colnames(NMDS_RambspcPSPSFT)[1] <- "Species"
colnames(NMDS_RambspcPSPST)[1] <- "Species"
colnames(NMDS_RambspcPSPSPT)[1] <- "Species"
NMDS_RambspcPSP<- rbind(NMDS_RambspcPSPSFT,NMDS_RambspcPSPST,NMDS_RambspcPSPSPT)
View(NMDS_RambspcPSPSPT)
View(NMDS_RambspcPSPST)
#Import datasets
NMDS_RambspcPSPSFT <- read.csv("input/NMDS_RambspcPSPSFT.csv", header=TRUE)
NMDS_RambspcPSPST <- read.csv("input/NMDS_RambspcPSPST.csv", header=TRUE)
NMDS_RambspcPSPSPT<- read.csv("input/NMDS_RambspcPSPSPT.csv", header=TRUE)
View(NMDS_RambspcPSPSFT)
View(NMDS_RambspcPSPSPT)
View(NMDS_RambspcPSPST)
View(NMDS_RambspcPSPSFT)
#Insert site column in excel
NMDS_RambspcPSPSPT<- read.csv("input/NMDS_RambspcPSPSPT.csv", header=TRUE)
colnames(NMDS_RambspcPSPSFT)[1] <- "Species"
colnames(NMDS_RambspcPSPST)[1] <- "Species"
colnames(NMDS_RambspcPSPSPT)[1] <- "Species"
NMDS_RambspcPSP<- rbind(NMDS_RambspcPSPSFT,NMDS_RambspcPSPST,NMDS_RambspcPSPSPT)
NMDS_RambspcPSP1 <- melt(NMDS_RambspcPSP, id.vars = c("Species", "Site"))
NMDS_RambspcPSP1$specieslatbi<-sub("^([[:alpha:]]*).*", "\\1", NMDS_RambspcPSP1$Species)
path <- unique(NMDS_RambspcPSP1$variable)
for (i in (unique(NMDS_RambspcPSP1$variable))){
filename<- paste("output/LicormodelsPSP",i,".csv", sep = "")
li <- subset(NMDS_RambspcPSP1, variable == i)
li <- na.omit(li)
lm(value ~ Site + specieslatbi, data= li)
s <- summary(lm(value ~ Site + specieslatbi, data= li))
s <- as.data.frame(s$coefficients)
write.csv(s, filename)
}
View(s)
path <- unique(NMDS_RambspcPSP1$variable)
for (i in (path)){
filename<- paste("output/LicormodelsPSP",i,".csv", sep = "")
li <- subset(NMDS_RambspcPSP1, variable == i)
li <- na.omit(li)
lm(value ~ Site + specieslatbi, data= li)
s <- summary(lm(value ~ Site + specieslatbi, data= li))
s <- as.data.frame(s$coefficients)
write.csv(s, filename)
}
path
