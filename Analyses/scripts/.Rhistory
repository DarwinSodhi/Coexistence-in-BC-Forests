afterhours2.0.HPDI <- apply( afterhours2.0 , 2 , HPDI , prob=0.89 )
#below plots Inverselogit_linearmodel.pdf
# plots raw data
# fading out points to make line and interval more visible
plot( impact3~mpd.obs.z , data=focaldistance_enitregenus , col=col.alpha(rangi2,0.5), ylab= "Yield Loss", xlab= "MPD")
# plot the MAP line, aka the mean impacts for each SES.FPD
lines(t(newdat2.0), afterhours2.0.mean)
# plot a shaded region for 89% HPDI
shade(afterhours2.0.HPDI,t(newdat2.0) )
#loading in datasets
focaldistance_onespecies <- read.csv("Focaldistanceonespeciesog.csv")
focaldistance_enitregenus <- read.csv("Focaldistanceentiregenus_og.csv")
#loading in datasets
yieldLoss <- read.csv("~/Documents/GitHub/Wine-Grape-Disease/data/yieldLoss.csv")
mpd_all_sp_in_genus2_0 <- read_csv("mpd_all_sp_in_genus2.0.csv")
mpd_all_sp_in_genus <- read_csv("mpd_all_sp_in_genus.csv")
#Renaming columns
colnames(mpd_all_sp_in_genus)[1] <- "pest"
colnames(mpd_all_sp_in_genus2_0)[1] <- "pest"
#adds an underscore between species names
yieldLoss$pest <- sub(" ", "_", yieldLoss$pest)
#merge datasets based on shared pathogen names
mpd_all_sp_in_genus_agr<- bind_rows(mpd_all_sp_in_genus, mpd_all_sp_in_genus2_0)
Yieldloss2.0 <- merge(mpd_all_sp_in_genus_agr, yieldLoss, by= "pest")
#coverts no info value to NA
Yieldloss2.0$yieldLoss <- na_if(Yieldloss2.0$yieldLoss, "No info.")
#renames column to impact
colnames(Yieldloss2.0)[13] <- "impact"
#converts column into numeric
Yieldloss2.0$impact <- as.numeric(Yieldloss2.0$impact)
#Multiplies impact value by 0.01
Yieldloss2.0$impact <- Yieldloss2.0$impact * 0.01
#converts impact to inverse logit
Yieldloss2.0$impact2 <- inv.logit(Yieldloss2.0$impact)
impact_invlogit_model2.0 <- stan_glm(impact2~ mpd.obs.z, data = Yieldloss2.0,
family = gaussian(link="identity"),)
#gets posterior
posteriorSamples2.0 <- as.data.frame(as.matrix(impact_invlogit_model2.0))
posteriorSamples2.0 <- posteriorSamples2.0[1:4000,]
#obtains original data
orginal_data<- as.data.frame(Yieldloss2.0$mpd.obs.z)
#creates empty matrix
afterhours <- (matrix(NA, nrow= nrow(posteriorSamples2.0), ncol = ncol(t(orginal_data))))
for (n in 1:nrow(orginal_data)){
afterhours[,n] <- as.matrix(posteriorSamples2.0$`(Intercept)` + posteriorSamples2.0$mpd.obs.z * orginal_data[n,])
#back transforms each row after inverlogit each impact
#afterhours[,n]  <- as.matrix(logit(afterhours[,n] ))
}
#codes for new data
newdatlength <- 50
newdat <- as.data.frame(seq(-10, 2.4, length.out=newdatlength))
afterhours2.0 <- (matrix(NA, nrow= nrow(posteriorSamples2.0), ncol = ncol(t(newdat))))
for (n in 1:nrow(newdat)){
afterhours2.0[,n] <- as.matrix(posteriorSamples2.0$`(Intercept)` + posteriorSamples2.0$mpd.obs.z * newdat[n,])
#back transforms each row after inverlogit each impact
#\afterhours2.0[,n]  <- as.matrix(logit(afterhours2.0[,n] ))
}
#figure 4.6
plot(impact2~mpd.obs.z, data=Yieldloss2.0, type= "n")
for ( i in 1:10 )
points(t(newdat) , afterhours2.0[i,] , pch=16 , col=col.alpha(rangi2,0.1))
# summarize the distribution of dose2.0
afterhours2.0.mean <- apply( afterhours2.0 , 2 , mean )
afterhours2.0.HPDI <- apply( afterhours2.0 , 2 , HPDI , prob=0.89 )
#below plots Inverselogit_linearmodel.pdf
# plots raw data
# fading out points to make line and interval more visible
plot( impact2~mpd.obs.z , data=Yieldloss2.0 , col=col.alpha(rangi2,0.5), ylab= "Yield Loss", xlab= "MPD", ylim= c(0,1), xlim=c(-10.5,2))
# plot the MAP line, aka the mean impacts for each SES.FPD
lines(t(newdat), afterhours2.0.mean)
# plot a shaded region for 89% HPDI
shade(afterhours2.0.HPDI,t(newdat))
labels <- c("A", "B")
#### Invlogit
#converts impact to inverse logit
focaldistance_enitregenus$impact3 <- inv.logit(focaldistance_enitregenus$impact2)
impact_invlogit_model <- stan_glm(impact3~ SES.FPD, data = focaldistance_enitregenus,
family = gaussian(link="identity"),)
#gets posterior
posteriorSamples2.0 <- as.data.frame(as.matrix(impact_invlogit_model))
posteriorSamples2.0 <- posteriorSamples2.0[1:4000,]
#obtains original data
orginal_data<- as.data.frame(focaldistance_enitregenus$SES.FPD)
#creates empty matrix
afterhours <- (matrix(NA, nrow= nrow(posteriorSamples2.0), ncol = ncol(t(orginal_data))))
for (n in 1:49){
afterhours[,n] <- as.matrix(posteriorSamples2.0$`(Intercept)` + posteriorSamples2.0$SES.FPD * orginal_data[n,])
#back transforms each row after inverlogit each impact
#afterhours[,n]  <- as.matrix(logit(afterhours[,n] ))
}
afterhours2.0 <- (matrix(NA, nrow= nrow(posteriorSamples2.0), ncol = ncol(t(newdat2.0))))
newdat2.0length <- 50
newdat2.0 <- as.data.frame(seq(range(focaldistance_enitregenus$mpd.obs.z, na.rm=TRUE)[1], range(focaldistance_enitregenus$SES.FPD, na.rm=TRUE)[2], length.out=newdat2.0length))
for (n in 1:50){
afterhours2.0[,n] <- as.matrix(posteriorSamples2.0$`(Intercept)` + posteriorSamples2.0$SES.FPD * newdat2.0[n,])
#back transforms each row after inverlogit each impact
#afterhours2.0[,n]  <- as.matrix(logit(afterhours2.0[,n] ))
}
#figure 4.6
plot(impact3~mpd.obs.z, data=focaldistance_enitregenus, type= "n")
for ( i in 1:10 )
points(t(newdat2.0) , afterhours2.0[i,] , pch=16 , col=col.alpha(rangi2,0.1))
# summarize the distribution of dose2.0
afterhours2.0.mean <- apply( afterhours2.0 , 2 , mean )
afterhours2.0.HPDI <- apply( afterhours2.0 , 2 , HPDI , prob=0.89 )
#below plots Inverselogit_linearmodel.pdf
# plots raw data
# fading out points to make line and interval more visible
plot( impact3~mpd.obs.z , data=focaldistance_enitregenus , col=col.alpha(rangi2,0.5), ylab= "Yield Loss", xlab= "MPD")
# plot the MAP line, aka the mean impacts for each SES.FPD
lines(t(newdat2.0), afterhours2.0.mean)
#loading in datasets
focaldistance_onespecies <- read.csv("Focaldistanceonespeciesog.csv")
focaldistance_enitregenus <- read.csv("Focaldistanceentiregenus_og.csv")
focaldistance_enitregenus$impact2 <- focaldistance_enitregenus$impact2* 0.01
focaldistance_onespecies$impact2 <- focaldistance_onespecies$impact2 * 0.01
#### Linear_Model
impact_linear_model <- stan_glm(impact2~ SES.FPD, data = focaldistance_enitregenus,
family = gaussian(link="identity"),)
summary(impact_linear_model,digits= 4)
#creates data set from linear model
posteriorSamples <- as.data.frame(as.matrix(impact_linear_model))
# I think you can use this get predictions that might help with plotting ... for example:
range(focaldistance_enitregenus$SES.FPD, na.rm=TRUE)
newdat2.0 <- as.data.frame(seq(range(focaldistance_enitregenus$SES.FPD, na.rm=TRUE)[1], range(focaldistance_enitregenus$SES.FPD, na.rm=TRUE)[2], length.out=500))
names(newdat2.0) <- "SES.FPD"
#this gives you ten data points
focaldistance_enitregenus2.0<-focaldistance_enitregenus[1:12,]
#new model with just ten data points
impact_linear_model2.0 <- stan_glm(impact2~ SES.FPD, data = focaldistance_enitregenus2.0,
family = gaussian(link="identity"),)
#extracts entire posterior
posteriorSamples <- as.data.frame(as.matrix(impact_linear_model2.0))
posteriorSamples <- as.data.frame(as.matrix(impact_linear_model))
mu_at_5 <- posteriorSamples$`(Intercept)` + posteriorSamples$SES.FPD * 5
#extracts first 10 samples
posteriorSamples10 <-posteriorSamples[1:10,]
#plots 10 data points with uncertainity
plot(impact2~SES.FPD, data=focaldistance_enitregenus)
for(i in 1:10)
abline(a=posteriorSamples10$`(Intercept)`[i], b=posteriorSamples10$SES.FPD[i], col=col.alpha("black",0.3))
#gets posterior
posteriorSamples <- as.data.frame(as.matrix(impact_linear_model))
#gets original data
orginal_data<- as.data.frame(focaldistance_enitregenus$SES.FPD)
dose <- (matrix(NA, nrow= nrow(posteriorSamples), ncol = ncol(t(orginal_data))))
#does the link function in rethinking with orginal model! (Each column is full posterior for each original data point)
for (n in 1:49){
dose[,n]<- as.matrix(posteriorSamples$`(Intercept)` + posteriorSamples$SES.FPD * orginal_data[n,])
}
#codes for new data
newdat2.0length <- 50
newdat2.0 <- as.data.frame(seq(range(focaldistance_enitregenus$SES.FPD, na.rm=TRUE)[1], range(focaldistance_enitregenus$SES.FPD, na.rm=TRUE)[2], length.out=newdat2.0length))
dose2.0 <- (matrix(NA, nrow= nrow(posteriorSamples), ncol = ncol(t(newdat2.0))))
#codes for link function with new data (Each column is full posterior for each new data point)
for (n in 1:newdat2.0length){
dose2.0[,n]<- as.matrix(posteriorSamples$`(Intercept)` + posteriorSamples$SES.FPD * newdat2.0[n,])
}
#figure 4.6
plot(impact2~SES.FPD, data=focaldistance_enitregenus, type= "n")
for ( i in 1:100 )
points(t(newdat2.0) , dose2.0[i,] , pch=16 , col=col.alpha(rangi2,0.1))
# summarize the distribution of dose2.0
dose2.0.mean <- apply( dose2.0 , 2 , mean )
dose2.0.HPDI <- apply( dose2.0 , 2 , HPDI , prob=0.89 )
#plots linearmodel.pdf
# plot raw data
# fading out points to make line and interval more visible
plot( impact2~SES.FPD , data=focaldistance_enitregenus , col=col.alpha(rangi2,0.5) )
# plot the MAP line, aka the mean impacts for each SES.FPD
lines(t(newdat2.0), dose2.0.mean)
# plot a shaded region for 89% HPDI
shade(dose2.0.HPDI,t(newdat2.0) )
#### Invlogit
#converts impact to inverse logit
focaldistance_enitregenus$impact3 <- inv.logit(focaldistance_enitregenus$impact2)
impact_invlogit_model <- stan_glm(impact3~ SES.FPD, data = focaldistance_enitregenus,
family = gaussian(link="identity"),)
#gets posterior
posteriorSamples2.0 <- as.data.frame(as.matrix(impact_invlogit_model))
posteriorSamples2.0 <- posteriorSamples2.0[1:4000,]
#obtains original data
orginal_data<- as.data.frame(focaldistance_enitregenus$SES.FPD)
#creates empty matrix
afterhours <- (matrix(NA, nrow= nrow(posteriorSamples2.0), ncol = ncol(t(orginal_data))))
for (n in 1:49){
afterhours[,n] <- as.matrix(posteriorSamples2.0$`(Intercept)` + posteriorSamples2.0$SES.FPD * orginal_data[n,])
#back transforms each row after inverlogit each impact
#afterhours[,n]  <- as.matrix(logit(afterhours[,n] ))
}
afterhours2.0 <- (matrix(NA, nrow= nrow(posteriorSamples2.0), ncol = ncol(t(newdat2.0))))
newdat2.0length <- 50
newdat2.0 <- as.data.frame(seq(range(focaldistance_enitregenus$mpd.obs.z, na.rm=TRUE)[1], range(focaldistance_enitregenus$SES.FPD, na.rm=TRUE)[2], length.out=newdat2.0length))
for (n in 1:50){
afterhours2.0[,n] <- as.matrix(posteriorSamples2.0$`(Intercept)` + posteriorSamples2.0$SES.FPD * newdat2.0[n,])
#back transforms each row after inverlogit each impact
#afterhours2.0[,n]  <- as.matrix(logit(afterhours2.0[,n] ))
}
#figure 4.6
plot(impact3~mpd.obs.z, data=focaldistance_enitregenus, type= "n")
for ( i in 1:10 )
points(t(newdat2.0) , afterhours2.0[i,] , pch=16 , col=col.alpha(rangi2,0.1))
# summarize the distribution of dose2.0
afterhours2.0.mean <- apply( afterhours2.0 , 2 , mean )
afterhours2.0.HPDI <- apply( afterhours2.0 , 2 , HPDI , prob=0.89 )
#below plots Inverselogit_linearmodel.pdf
# plots raw data
# fading out points to make line and interval more visible
plot( impact3~mpd.obs.z , data=focaldistance_enitregenus , col=col.alpha(rangi2,0.5), ylab= "Yield Loss", xlab= "MPD")
# plot the MAP line, aka the mean impacts for each SES.FPD
lines(t(newdat2.0), afterhours2.0.mean)
# plot a shaded region for 89% HPDI
shade(afterhours2.0.HPDI,t(newdat2.0) )
par(mfrow = c(2, 1))
#below plots Inverselogit_linearmodel.pdf
# plots raw data
# fading out points to make line and interval more visible
plot( impact3~mpd.obs.z , data=focaldistance_enitregenus , col=col.alpha(rangi2,0.5), ylab= "Yield Loss", xlab= "MPD")
# plot the MAP line, aka the mean impacts for each SES.FPD
lines(t(newdat2.0), afterhours2.0.mean)
# plot a shaded region for 89% HPDI
shade(afterhours2.0.HPDI,t(newdat2.0) )
#below plots Inverselogit_linearmodel.pdf
# plots raw data
# fading out points to make line and interval more visible
plot( impact2~mpd.obs.z , data=Yieldloss2.0 , col=col.alpha(rangi2,0.5), ylab= "Yield Loss", xlab= "MPD", ylim= c(0,1), xlim=c(-10.5,2))
# plot the MAP line, aka the mean impacts for each SES.FPD
lines(t(newdat), afterhours2.0.mean)
# plot a shaded region for 89% HPDI
shade(afterhours2.0.HPDI,t(newdat))
labels <- c("A", "B")
for(i in 2:1){
add_label_legend(0.02, 0.07, labels[i])
}
add_label()
#Figures for Winegrape paper 2.0
#Started Feb 9th 2021
#By Darwin
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
setwd("~/Documents/GitHub/Wine-Grape-Disease/analysis/output/")
#plots phylogenetic_metrics.pdf
mntd.all.sp.in.genus_ALL <- read.csv("~/Documents/GitHub/Wine-Grape-Disease/analysis/output/mntd.all.sp.in.genus_ALL.csv")
mpd.all.sp.in.genus_ALL <- read.csv("~/Documents/GitHub/Wine-Grape-Disease/analysis/output/mpd.all.sp.in.genus_ALL.csv")
#Takes MNTD and MPD data and merges into a single dataframe
mntd<-cbind(rep("MNTD", length(mntd.all.sp.in.genus_ALL$mntd.obs.z)),mntd.all.sp.in.genus_ALL$mntd.obs.z)
mpd<-cbind(rep("MPD", length(mpd.all.sp.in.genus_ALL$mpd.obs.z)),mpd.all.sp.in.genus_ALL$mpd.obs.z)
phylomet<-as.data.frame(rbind(mntd, mpd), stringsAsFactors=FALSE)
boxplot(as.numeric(V2) ~ as.factor(V1), data=phylomet,staplelwd = 0 , ylab = "SES", xlab =" ")
par(mfrow= c(1,1))
boxplot(as.numeric(V2) ~ as.factor(V1), data=phylomet,staplelwd = 0 , ylab = "SES", xlab =" ")
abline(h=0, col=2, lty=2)
pdf("~/Documents/GitHub/Wine-Grape-Disease/figures/phylogenetic_metrics.pdf")
par(mfrow= c(1,1))
boxplot(as.numeric(V2) ~ as.factor(V1), data=phylomet,staplelwd = 0 , ylab = "SES", xlab =" ")
abline(h=0, col=2, lty=2)
dev.off()
par(mfrow= c(1,1))
boxplot(as.numeric(V2) ~ as.factor(V1), data=phylomet,staplelwd = 0 , ylab = "SES", xlab =" ")
abline(h=0, col=2, lty=2)
dev.off()
pdf("~/Documents/GitHub/Wine-Grape-Disease/figures/phylogenetic_metrics.pdf")
par(mfrow= c(1,1))
boxplot(as.numeric(V2) ~ as.factor(V1), data=phylomet,staplelwd = 0 , ylab = "SES", xlab =" ")
abline(h=0, col=2, lty=2)
dev.off()
pdf("~/Documents/GitHub/Wine-Grape-Disease/figures/phylogenetic_metrics.pdf")
par(mfrow= c(1,1))
boxplot(as.numeric(V2) ~ as.factor(V1), data=phylomet, staplelwd = 0 , ylab = "SES", xlab =" ")
abline(h=0, col=2, lty=2)
dev.off()
boxplot(as.numeric(V2) ~ as.factor(V1), data=phylomet, staplelwd = 0 , ylab = "SES", xlab =" ")
boxplot(as.numeric(V2) ~ as.factor(V1), data=phylomet, staplelwd = "0" , ylab = "SES", xlab =" ")
pdf("~/Documents/GitHub/Wine-Grape-Disease/figures/phylogenetic_metrics.pdf")
par(mfrow= c(1,1))
boxplot(as.numeric(V2) ~ as.factor(V1), data=phylomet, staplelwd = "0" , ylab = "SES", xlab =" ")
abline(h=0, col=2, lty=2)
dev.off()
test<-boxplot(as.numeric(V2) ~ as.factor(V1), data=phylomet, staplelwd = 0 , ylab = "SES", xlab =" ")
test
plot(test)
abline(h=0, col=2, lty=2)
##Below is code that creates figure MPDvsMNTD_ALL.pdf
MNTD_MPDcomparison<- merge(mntd.all.sp.in.genus_ALL,mpd.all.sp.in.genus_ALL)
View(MNTD_MPDcomparison)
#loading in datasets
focaldistance_onespecies <- read.csv("Focaldistanceonespeciesog.csv")
focaldistance_enitregenus <- read.csv("Focaldistanceentiregenus_og.csv")
View(focaldistance_enitregenus)
model1<- lm(mpd.obs.z ~ Type + category + bodysize, data= focaldistance_enitregenus)
anova(model1)
model1<- lm(mpd.obs.z ~ category, data= focaldistance_enitregenus)
anova(model1)
summary(model1)
model1<- lm(mpd.obs.z ~ category = "G", data= focaldistance_enitregenus)
post1 <- stan_glm(mpd.obs.z ~ Type , data = focaldistance_enitregenus,
family = gaussian(link="identity"),)
post2 <- stan_glm(mpd.obs.z ~ category , data = focaldistance_enitregenus,
family = gaussian(link="identity"),)
post3 <- stan_glm(mpd.obs.z ~ Type + category , data = focaldistance_enitregenus,
family = gaussian(link="identity"),)
loo(post1)
post1 <- loo(post1)
post2 <- loo(post2)
post3 <- loo(post3)
loo_compare(post1, post2, post3)
#loades packes
library(readr)
library(taxize)
library(dplyr)
library(plyr)
library(rstanarm)
library(tibble)
library(ggplot2)
library(ggpubr)
source("~/Documents/GitHub/Wine-Grape-Disease/analysis/scripts/Cleaninghostrangesnew.R")
#loading in datasets
mpd.all.sp.in.genus_ALL <- read.csv("~/Documents/GitHub/Wine-Grape-Disease/analysis/output/mpd.all.sp.in.genus_ALL.csv")
mpd_single_sp_in_genus_ALL <- read.csv("~/Documents/GitHub/Wine-Grape-Disease/analysis/output/mpd.single.sp.in.genus_ALL.csv")
#rename column
colnames(mpd.all.sp.in.genus_ALL)[1] <- "pest"
colnames(mpd_single_sp_in_genus_ALL)[1] <- "pest"
#Adding pathogen category
#creates dataframe where for each pathogen the number of genera it infects is counted
category <- aggregate(New.Genus ~ pest, GrapePestsfinal, function(x) length(unique(x)))
#if loop that assigns category to each pest based on number of genera infect
for (i in 1:nrow(category)){
if (category$New.Genus[i] == 1){
category$category[i] <- "S"
} else if (category$New.Genus[i] != 1 ){
category$category[i] <- "G"
} else {
#if row is NA then it will show up as NA
category$category[i]<- "NA"
}
}
#merges original data with category dataframe!
mpd.all.sp.in.genus_ALL<- merge(mpd.all.sp.in.genus_ALL, category, by = "pest" )
mpd_single_sp_in_genus_ALL<- merge(mpd_single_sp_in_genus_ALL, category, by = "pest" )
#removes underscore and replaces it with a space
mpd.all.sp.in.genus_ALL$pest <- sub("_", " ",mpd.all.sp.in.genus_ALL$pest )
#creates a dataframe of just the pest names
outputlist <- mpd.all.sp.in.genus_ALL$pest
#creates an empty list with the same number of lists as pest
output<- vector(mode = "list", length = length(outputlist))
#For loop that gets taxonomic information for species then stores then in the empty list
for (i in 1:length(outputlist)){
output[i] <- classification(outputlist[i], db = "ncbi")
}
#creates empty dataframes for kingdom and phylum data
kingdomdata<- data.frame(matrix(NA, nrow = 536, ncol = 3))
phylumdata <- data.frame(matrix(NA, nrow = 536, ncol = 3))
# loop where if a dataframe is empty then kingdom is set as NA while for all others the kingdom row is pulled out
for (i in 1:length(output)){
if (is.na(output[[i]]) == TRUE){
kingdomdata[i,] <- "NA"
} else{
kingdomdata[i,] <- output[[i]][4,]
}
}
#a little tougher but same first part as above, if a dataframe for phylum is empty then NA is put down otherwise the data for phylum row is taken
for (i in 1:length(output)){
if (is.na(output[[i]]) == TRUE){
phylumdata[i,] <- "NA"
} else if (empty(output[[i]][output[[i]]$rank == "phylum",]) == TRUE) {
phylumdata[i,] <- "NA"
} else {
phylumdata[i,] <- output[[i]][output[[i]]$rank == "phylum",]
}
}
#Changes column names
colnames(kingdomdata)[1] <- "kingdom"
colnames(phylumdata)[1] <- "phylum"
#binds kingdom/phylum dataframes with mpd
mpd.all.sp.in.genus_ALL<- bind_cols(mpd.all.sp.in.genus_ALL, kingdomdata[1])
mpd.all.sp.in.genus_ALL<- bind_cols(mpd.all.sp.in.genus_ALL, phylumdata[1])
for (i in 1:nrow(mpd.all.sp.in.genus_ALL)){
#if pathogen belongs to either Metazoa and not Nematoda then it will be a pest
if (mpd.all.sp.in.genus_ALL$kingdom[i] == "Metazoa" & mpd.all.sp.in.genus_ALL$phylum[i] != "Nematoda" ){
mpd.all.sp.in.genus_ALL$Type[i] <- "Pest"
#if pathogen belongs to either Metazoa and Nematoda then it will be a nematode
} else if (mpd.all.sp.in.genus_ALL$kingdom[i] == "Metazoa" & mpd.all.sp.in.genus_ALL$phylum[i] == "Nematoda"){
mpd.all.sp.in.genus_ALL$Type[i] <- "Nematode"
#if pathogen belongs to either fungi then it will be a fungi
} else if (mpd.all.sp.in.genus_ALL$kingdom[i] == "Fungi"){
mpd.all.sp.in.genus_ALL$Type[i] <- "Fungi"
#if pathogen belongs to either any of the viruses kingdoms then it is a virus
} else if ((mpd.all.sp.in.genus_ALL$kingdom[i] == "Kitrinoviricota" || mpd.all.sp.in.genus_ALL$kingdom[i] == "Pisuviricota" || mpd.all.sp.in.genus_ALL$kingdom[i] == "Cressdnaviricota" || mpd.all.sp.in.genus_ALL$kingdom[i] == "Artverviricota" || mpd.all.sp.in.genus_ALL$kingdom[i] == "Negarnaviricota")){
mpd.all.sp.in.genus_ALL$Type[i] <- "Virus"
#if pathogen belongs to either of the bacteria kingdoms then it is a bacteria
}  else if ((mpd.all.sp.in.genus_ALL$kingdom[i] == "Tenericutes" || mpd.all.sp.in.genus_ALL$kingdom[i] == "Gammaproteobacteria" || mpd.all.sp.in.genus_ALL$kingdom[i] == "Alphaproteobacteria" || mpd.all.sp.in.genus_ALL$kingdom[i] == "Negarnaviricota" || mpd.all.sp.in.genus_ALL$kingdom[i] == "Betaproteobacteria")){
mpd.all.sp.in.genus_ALL$Type[i] <- "Bacteria"
#if pathogen belongs to either any of the viruses kingdoms then it is a virus
} else if ((mpd.all.sp.in.genus_ALL$kingdom[i] == "Citrus exocortis viroid" || mpd.all.sp.in.genus_ALL$kingdom[i] == "Grapevine yellow speckle viroid 1" || mpd.all.sp.in.genus_ALL$kingdom[i] == "Grapevine yellow speckle viroid 2" || mpd.all.sp.in.genus_ALL$kingdom[i] == "Hop stunt viroid" )){
mpd.all.sp.in.genus_ALL$Type[i] <- "Virus"
#if pathogen belongs to either any of nematode then it is a nematode
} else if (mpd.all.sp.in.genus_ALL$kingdom[i] == "Stramenopiles"){
mpd.all.sp.in.genus_ALL$Type[i] <- "Nematode"
} else {
#if row is NA then it will show up as NA
mpd.all.sp.in.genus_ALL$Type[i] <- "NA"
}
}
#creates dataset with type column
type<- mpd.all.sp.in.genus_ALL$Type
#binds type with mpd_single species
mpd_single_sp_in_genus_ALL<- bind_cols(mpd_single_sp_in_genus_ALL, type)
#renames column to type
colnames(mpd_single_sp_in_genus_ALL)[12] <- "Type"
post1<- stan_glm(mpd.obs.z ~ Type, data = mpd.all.sp.in.genus_ALL,
family = gaussian(link="identity"),)
post2<- stan_glm(mpd.obs.z ~ category, data = mpd.all.sp.in.genus_ALL,
family = gaussian(link="identity"),)
post3<- stan_glm(mpd.obs.z ~ Type + category, data = mpd.all.sp.in.genus_ALL,
family = gaussian(link="identity"),)
post1 <- loo(post1)
post2 <- loo(post2)
post3 <- loo(post3)
loo_compare(post1,post2,post3)
#code to simulate fake data based on experimental design
#housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
graphics.off()
setwd("~/Documents/GitHub/Coexistence-in-BC-Forests/Analyses/scripts")
library(ggplot2)
library(ggpubr)
library(wesanderson)
set.seed(1234)
#### codes for the four treatments
density <- c(0,1)
temptreat <- c(0,1)
soil_type <- c(0,1)
soil_treat <- c(0,1)
error <- 7.5
### codes for intercept and individual effects
#y = biomass
intercepthere <- 50
soiltype_effect <- -15 #loses 15 units of biomass in conspecific soil
density_effect <- -7.5 # as in you LOSE 7.5 units of biomass in the high treatment
temp_effect <- 5 # as in you Gain 5 units of biomass in the high temp treatment
soiltreat_effect <- 2.5 # as in you Gain 2.5 units of biomass in the sterilized streatment
#### codes for interactions
densoiltype_intxn <- -5 #high density + conspecific soil causes a loss of 5 units of biomass
denstemp_intxn <- -2 # as in when you have high density and high temp you lose 2 units of biomass
densoiltreat_itxn <- -4 #high density + sterilization causes a Loss of 4 units of biomass
tempsoiltype_intxn <- -10 #high temp + conspecific soil causes a loss of 10 units of biomass
tempsoiltreat_intxn <- 2.5 #high temp + sterilization causes a gain of 2.5 units of biomass
soiltypesoiltreat_intxn <- 5 #conspecific soil + sterilization causes a gain of 5 unites of biomass
densoiltypetemp_intxn <- -2.5 #high temp + high density + conspecific soil causes a loss of 2.5 units of biomass
densoiltreattemp_intxn <- -2 #high temp + high density + sterilzation causes a loss of 0.5 units of biomass
densoiltypesoiltreat_intxn <- -4 #high density + conspecific soil + sterilization causes a loss of 4 units of biomass
soiltreattempsoiltype_intxn <-2.5 #high temp + conspecific soil + sterilization causes a gain of 2.5 units of biomass
all_intxn <- -2 #high temp + high density + conspecific soil + sterilization causes a loss of 2 units of biomass
#codes for number of replicates
reps_per_treatment <- 100 # 10 is always a good place to start (easy to do the math in your head and check your code)
ntot <- length(density)*length(temptreat)*length(soil_type)*length(soil_treat)*reps_per_treatment
#codes for number of replicates
reps_per_treatment <- 10 # 10 is always a good place to start (easy to do the math in your head and check your code)
ntot <- length(density)*length(temptreat)*length(soil_type)*length(soil_treat)*reps_per_treatment
#codes for number of replicates
reps_per_treatment <- 100 # 10 is always a good place to start (easy to do the math in your head and check your code)
ntot <- length(density)*length(temptreat)*length(soil_type)*length(soil_treat)*reps_per_treatment
#creates datae frame for a factorial design including all four treatments
factorialgrid <- expand.grid(x_density = c(0, 1), x_temp = c(0,1), x_soiltype= c(0,1), x_soiltreat= c(0,1))
#codes a data frame based on factorial grid and number of reps
df <- as.data.frame(factorialgrid[rep(seq_len(nrow(factorialgrid)), each = reps_per_treatment),])
#calculates the biomass based on treatments and interactions
df$y_biomass <- intercepthere +
density_effect*df$x_density +
temp_effect*df$x_temp +
soiltype_effect*df$x_soiltype +
soiltreat_effect*df$x_soiltreat + # 4 main effects
densoiltype_intxn * (df$x_density * df$x_soiltype) +
denstemp_intxn * (df$x_density * df$x_temp) +
densoiltreat_itxn * (df$x_density * df$x_soiltreat) +
tempsoiltreat_intxn * (df$x_temp * df$x_soiltreat) +
tempsoiltype_intxn * (df$x_temp * df$x_soiltype) +
soiltypesoiltreat_intxn * (df$x_soiltype * df$x_soiltreat) + # 6 2-way intxns
densoiltypetemp_intxn * (df$x_density * df$x_soiltype * df$x_temp) +
densoiltreattemp_intxn * (df$x_density * df$x_soiltreat * df$x_temp) +
densoiltypesoiltreat_intxn * (df$x_density * df$x_soiltype * df$x_soiltreat) +
soiltreattempsoiltype_intxn * (df$x_soiltreat * df$x_temp * df$x_soiltype ) + #4 3-way intxns
all_intxn * (df$x_density * df$x_temp * df$x_soiltype * df$x_soiltreat)  # 1 4-way intxn
# incorporating 15% error into y
df$y_pred <- rnorm(n = ntot, mean = df$y_biomass, sd = error)
#Statistical model to test paramaters
fittedmodel <- lm(y_pred ~ x_density * x_temp * x_soiltype * x_soiltreat, data= df)
## Putting parameters into a list so you can call all of them at once
#suggestion from Geoff!
param <- list(intercepthere = 50,
soiltype_effect = -15,
density_effect = -7.5,
temp_effect = 5,
soiltreat_effect = 2.5,
#### codes for interactions
densoiltype_intxn = -5,
denstemp_intxn = -2,
densoiltreat_itxn = -4,
tempsoiltype_intxn = -10,
tempsoiltreat_intxn = 2.5,
soiltypesoiltreat_intxn = 5,
densoiltypetemp_intxn = -2.5,
densoiltreattemp_intxn = -2,
densoiltypesoiltreat_intxn = -4,
soiltreattempsoiltype_intxn = 2.5,
all_intxn = -2)
## Model estimates
t(coef(fittedmodel))
## True value
t(param)
View(df)
